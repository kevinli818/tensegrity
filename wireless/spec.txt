-----------------------------------------------------------------------------------------------------
Section 0: Message Structure
-----------------------------------------------------------------------------------------------------
All messages have the relatively simple structure of Message ID, Controller ID, Payload, and checksum 
as depicted below. The message and controller IDs together are considered the "header" of the message,
with any protocol message sent having at least these two elements. Contents of the payload vary
depending on the message type.
 
+------------+---------------+-------------------------+------------+
| Message ID | Controller ID |         Payload         |  Checksum  |
|  (8 bits)  |    (8 bits)   |     (length varies)     |  (8 bits)  |
+------------+---------------+-------------------------+------------+

Message ID - An 8-bit ID specifying the type of message being sent. More information about each message 
             type is specified in the following sections.

Controller ID - A number ranging from 1-5 signifying either which controller the message is intended 
                for (if sent by the master controller) or the slave controller that the message is 
                being sent from. The master controller has ID 0, and the five slave controllers have 
                IDs from 1 to 5. If the master controller sends a message with Controller ID equal to 0,
                then the message sent is intended to be read by all slaves (often happens for keepalives).

Payload - Varies depending on the type of message being sent. Described in more detail in later 
          sections.

Checksum - An 8-bit checksum sent at the end of every message. For simplicity, the checksum is always
           sent as the 32nd byte of any message. This checksum is calculated by simply XORing the first 
           31 bytes of the message together and using the result of that calculation. Note that if a
           checksum turns out to be invalid upon receiving a message, the receive_message function 
           replaces the message_id field of that message with an error code.

-----------------------------------------------------------------------------------------------------
Section 1: Table summary of message types.          
-----------------------------------------------------------------------------------------------------
+----+--------------+-----------------------------------------------------+
| ID | Message Type |                     Description                     |
+-------------------------------------------------------------------------+
| 0  | EchoRequest  | Keepalive timer sent from master->slave.            |
|    |    /Response | Response sent from slave->master                    |
+-------------------------------------------------------------------------+
| 1  | MotorCommand | Always sent from master->slave.                     |
|    |              | Gives a command to each of the four motors          |
|    |              | controlled by the controller the message is sent to.|
+-------------------------------------------------------------------------+
| 2  |EncoderReading| Always sent from slave->master.                     |
|    |              | Updates the master controller of the positions      |
|    |              | of the four motors of a certain controller.         |
+-------------------------------------------------------------------------+
| 3  | EndcapSensor | Always sent from slave->master.                     |
|    |    Reading   | A boolean sensor reading that is true if the        |
|    |              | corresponding endcap sensor is activated. Note that |
|    |              | unlike other messages that are sent on a schedule,  |
|    |              | EncoderSensorReadings can be sent as an interrupt.  |
+-------------------------------------------------------------------------+

Note: more message types will be added as needed.

-----------------------------------------------------------------------------------------------------
Section 2: EchoRequests and EchoResponses
-----------------------------------------------------------------------------------------------------
EchoRequests and EchoResponses are the keep-alives sent between controller and slaves. The master 
controller sends an EchoRequest to all slaves simultaneously every 10 seconds. The Controller ID is 
set to 0 as each slave is expected to respond to the EchoRequest, and the payload contains a single
32-bit integer.

Within 1000ms, the master expects a response back from each of the slaves that it sent an EchoRequest
to, otherwise it assumes the connection has been lost. The EchoResponse sent from slave->master is 
nearly identical to the request originally received from the master. The only difference is that the
Controller ID of the response is changed from 0 to the Controller ID of the slave that the response 
is coming from.

Upon receiving an EchoResponse, the master controller checks to see that the 32-bit integer in the 
payload of the response is identical to that sent in the request to verify the reliability of the
communication.

-----------------------------------------------------------------------------------------------------
Section 3: MotorCommands and EncoderReadings
-----------------------------------------------------------------------------------------------------
MotorCommands and EncoderReadings are messages with virtually identical formatting. They are so 
closely tied to each other that they may as well be described together, but they do have different
IDs to make code on the user side more readable.

The purpose of the MotorCommand message is self explanatory. The master controller sends a 
MotorCommand to a slave to signal the slave to change the position of one or more of the motors
that it controls. EncoderReadings are sent back from slave to master to periodically update the 
master controller on the current position of its motors. The frequency of EncoderReading updates
is currently set at 2Hz. The controller can thus expect to have to process EncoderReading updates
incoming at a rate of roughly 10 updates/second.

+-------------+-------------+-------------+-------------+
| M1 Position | M2 Position | M3 Position | M4 Position |
|  (32 bits)  |  (32 bits)  |  (32 bits)  |  (32 bits)  |
+-------------+-------------+-------------+-------------+
| Output 4    | Output 5    | Output 10   | Output 11   |  <-- output pin  # of corresponding motor
+-------------+-------------+-------------+-------------+
As each controller manages exactly four motors, a Motor ID is not sent along with each motor 
position. Instead, the motor that each position corresponds to is specified implicitly by the
index of the number in the array. Because the position of each motor can be specified with 
an integer ranging from 0-3600, we reserve numbers above 3600 as special commands listed below.

MotorCommand Reserved Numbers:
+---------+-------------+
| Command |   Meaning   |
| Number  |             |
+-----------------------+
|  0xFFF  |Stay in place|
+---------+-------------+

Note: more commands will be added as needed.

The structure of the payload of an EncoderReading is identical to that of a MotorCommand, so a
diagram is not included. Exactly when EncoderReadings begin being sent to the master controller
has not quite been worked out yet, but one possible scheme would be to have the first MotorCommand
sent from the master controller to a certain slave act as sort of the "subscription message" to 
begin receiving updates from that particular slave.

-----------------------------------------------------------------------------------------------------
Section 4: EndcapSensorReadings
-----------------------------------------------------------------------------------------------------
EndcapSensorReadings are simply boolean values that are true if the corresponding endcap sensors are
activated and false otherwise. Like MotorCommands and EncoderReadings, the endcap that the message
corresponds to is specified implicitly by the controller sending the message as well as the position
in the array of sensor values (which happens to be an array of length 2 in this case as each controller
is in charge of only two endcap sensors). The structure of the payload of an EndcapSensorReading is 
given below.

+------------+------------+
| E1 Reading | E2 Reading |
|  (8 bits)  |  (8 bits)  |
+------------+------------+
Note that since EndcapSensorReadings are boolean sensor readings, the most significant 7 bits of each 
reading are not used and thus will be ignored.
